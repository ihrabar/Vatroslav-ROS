/*!	\file	Kinematics.cpp
	\brief	Kinematics implementation.

 */

#include <cmath>

#include <boost/foreach.hpp>

#include "Kinematics.hpp"

namespace Vatroslav
{

//=============================================================================

Kinematics::Kinematics( FlipperPtr p_front_left, FlipperPtr p_front_right,
					    FlipperPtr p_rear_left, FlipperPtr p_rear_right, 
					    double ax_len, double speed_tol ) 
	: p_front_left_( p_front_left ), p_front_right_( p_front_right ),
	  p_rear_left_( p_rear_left ), p_rear_right_( p_rear_right ),
	  ax_len_( ax_len ), speed_tol_( speed_tol ), 
	  v_ref_( 0 ), v_( 0 ), w_ref_( 0 ), w_( 0 ), 
	  front_w_ref_( 0 ), front_w_( 0 ), rear_w_ref_( 0 ), rear_w_( 0 ), 
	  state_( STOP )
{
	
}

//-----------------------------------------------------------------------------

bool Kinematics::Connect( )
{
	bool success = true;

	// Connect all devices.
	success = success && p_front_left_->Connect( ) && p_front_right_->Connect( )
					  && p_rear_left_->Connect( ) && p_rear_right_->Connect( );

	// Update the data from all devices.
	success = success && this->Update( );

	return success;
}

//-----------------------------------------------------------------------------

bool Kinematics::Disconnect( )
{
	bool success = true;

	// Before disconnecting, set all references to 0
	v_ref_ = 0;
	w_ref_ = 0;
	
	front_w_ref_ = 0;
	rear_w_ref_ = 0;

	/*	Update all devices to stop vehicle motion.
		Some more work might be required here. We might want to wait around
		untill all the actuators have actually come to a standstill
	 */
	success = success && this->Update( );

	success = success && p_front_left_->Disconnect( ) && p_front_right_->Disconnect( )
					  && p_rear_left_->Disconnect( ) && p_rear_right_->Disconnect( );

	return success;
}

//-----------------------------------------------------------------------------

bool Kinematics::Update( )
{
	bool success = true;

	/* Update all flippers */
	success = success && p_front_left_->Update( ) && p_front_right_->Update( )
					  && p_rear_left_->Update( ) && p_rear_right_->Update( );

	/*
		First establish current robot state.
		The current state is based on individual flipper states.
	 */
	Flipper::StateType dominant_flipper_state = Flipper::STOP;
	if ( p_front_left_->State( ) > dominant_flipper_state )
	{
		dominant_flipper_state = p_front_left_->State( );
	}
	
	if ( p_front_right_->State( ) > dominant_flipper_state )
	{
		dominant_flipper_state = p_front_right_->State( );
	}
	
	if ( p_rear_left_->State( ) > dominant_flipper_state )
	{
		dominant_flipper_state = p_rear_left_->State( );
	}
	
	if ( p_rear_right_->State( ) > dominant_flipper_state )
	{
		dominant_flipper_state = p_rear_right_->State( );
	}

	switch ( dominant_flipper_state )
	{
		case Flipper::STOP:
			state_ = STOP;
			v_ = 0;
			w_ = 0;
			front_w_ = 0;
			rear_w_ = 0;
			break;
		case Flipper::DRIVE:
			state_ = DRIVE;
			front_w_ = 0;
			rear_w_ = 0;
			v_ = ( p_front_right_->TransVel( ) 
				   + p_front_left_->TransVel( ) ) / 2.0;
			w_ = ( p_front_right_->TransVel( ) 
				   - p_front_left_->TransVel( ) ) / ( 0.5 * ax_len_ );
			break;
		case Flipper::FLIP:
			state_ = FLIP;
			v_ = 0;
			w_ = 0;
			front_w_ = p_front_right_->RotVel( );
			rear_w_ = p_rear_right_->RotVel( );
			break;
		case Flipper::SOL_FAIL:
			state_ = FAIL;
			v_ = 0;
			w_ = 0;
			front_w_ = 0;
			rear_w_ = 0;
			break;
		default:
			state_ = FAIL;
	}

	/*
		According to current state and given setpoints,
		compute new commands for the flippers.
	 */

	if ( state_ == FAIL )
	{
		/* Some of the flippers have failed. Set all speed references to 0. */
		v_ref_ = 0;
		w_ref_ = 0;
		rear_w_ref_ = 0;
		front_w_ref_ = 0;
	}

	if ( ( fabs( v_ref_ ) + fabs( w_ref_ ) ) > speed_tol_ )
	{
		/* Command is drive */
		
		if ( state_ = FLIP )
		{
			/* We must stop first */
			p_front_left_->RotVelRef( 0 );
			p_front_right_->RotVelRef( 0 );
			p_rear_left_->RotVelRef( 0 );
			p_rear_right_->RotVelRef( 0 );
			
		}
		else
		{
			/* 
				State is either STOP or DRIVE, 
				so we can just set th speed references 
			 */
			
			/*
				This is the kinematic model of the vehicle. We might need to 
				get more sophisticated than this to get better positioning
				accuracy.
			 */
			double v_right = v_ref_ + w_ref_ * ax_len_ / 4;
			double v_left = v_ref_ - w_ref_ * ax_len_ / 4;
			
			p_front_left_->TransVelRef( v_left );
			p_rear_left_->TransVelRef( v_left );
			p_front_right_->TransVelRef( v_right );
			p_rear_right_->TransVelRef( v_right );
		}
	}
	else if ( ( fabs( rear_w_ref_ ) + fabs( front_w_ref_ ) ) > speed_tol_ )
	{
		/* Command is flip */
		if ( state_ = DRIVE )
		{
			/* We must stop first */
			p_front_left_->TransVelRef( 0 );
			p_front_right_->TransVelRef( 0 );
			p_rear_left_->TransVelRef( 0 );
			p_rear_right_->TransVelRef( 0 );
		}
		else
		{
			/* 
				State is either STOP or FLIP, 
				so we can just set the speed references 
			 */
			p_front_left_->TransVelRef( front_w_ref_ );
			p_front_right_->TransVelRef( front_w_ref_ );
			p_rear_left_->TransVelRef( rear_w_ref_ );
			p_rear_right_->TransVelRef( rear_w_ref_ );
		}
	}
	else
	{
		/* Command is stop */
		p_front_left_->TransVelRef( 0 );
		p_front_left_->RotVelRef( 0 );
		p_front_right_->TransVelRef( 0 );
		p_front_right_->RotVelRef( 0 );
		p_rear_left_->TransVelRef( 0 );
		p_rear_left_->RotVelRef( 0 );
		p_rear_right_->TransVelRef( 0 );
		p_rear_right_->RotVelRef( 0 );
	}

	return success;
}

//=============================================================================

}
