/*	\file	CommImpl.hpp
	\brief	Definitions of communication implementation interfaces and classes.

 */

#ifndef VATROSLAV_HPP_IMPL
#define VATROSLAV_HPP_IMPL

#include <cstring>	// form memcpy
#include <string>
#include <cassert>

#include "Communication.hpp"

namespace Vatroslav
{

//=============================================================================

//! Interface for communication implementation classes.
/*!
	Abstract base class defining the communication implementation interface.
 */
class CommImpl
{
 public:
	
	//! Open the communication.
	virtual bool Open( const CommPar& par ) = 0;

	//! Close the communication.
	virtual bool Close( ) = 0;

	//! Send data.
	virtual bool Send( const CommMsg& msg ) = 0;

	//! Receive data.
	/*!
		@param timeout	Amount of time to wait for the incoming message, in 
						msec (?)
	 */
	virtual bool Receive( CommMsg& msg, unsigned short timeout ) = 0;

	//! Get communication parameters.
	/*!

	 */
	virtual const CommPar& Params( void ) = 0;

	//! Create a concrete communication class implementation.
	/*!

	 */
	static CommImpl& Create( const CommPar& par );
};

//=============================================================================


}

#endif